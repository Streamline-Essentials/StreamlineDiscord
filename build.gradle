plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'io.freefair.lombok' version '8.10.2'
}

group properties['group']
version properties['version']

ext {
    jdaVersion = "5.3.0"

    deps = ""
    StringBuilder builder = new StringBuilder()

    int i = 0
    List<String> list = properties['pf.dependencies'].toString().split(", ")
    for (String s : list) {
        if (i == list.size() - 1) {
            builder.append(s)
        } else {
            builder.append(s).append(", ")
        }
        i ++
    }

    deps = builder.toString()

    needs_bapi = false

    String include_bapi = rootProject.properties.get('include-bapi', "false");

    if (include_bapi.toBoolean()) {
        needs_bapi = true
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    maven { url = 'https://jitpack.io' }
    // Spigot / Bukkit
    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }
}

dependencies {
    // Spigot / Bukkit
    compileOnly 'org.spigotmc:spigot-api:1.20.4-R0.1-SNAPSHOT'

    // LuckPerms
    compileOnly 'net.luckperms:api:5.4'

    // StreamlineCore
    boolean includeBapi = rootProject.properties['include-bapi'].toString().toBoolean()
    if (includeBapi) {
        annotationProcessor(compileOnly("com.github.Streamline-Essentials.StreamlineCore:StreamlineCore-BAPI:${rootProject.properties['streamline.version'] ?: 'master-SNAPSHOT'}"))
    } else {
        annotationProcessor(compileOnly("com.github.Streamline-Essentials.StreamlineCore:StreamlineCore-API:${rootProject.properties['streamline.version'] ?: 'master-SNAPSHOT'}"))
    }

    // JDA
    shadow(implementation("net.dv8tion:JDA:$jdaVersion") { // replace $version with the latest version
        // Optionally disable audio natives to reduce jar size by excluding `opus-java`
        // Gradle DSL:
        exclude module: 'opus-java'
        exclude group: 'org.slf4j'
        // Kotlin DSL:
        // exclude(module="opus-java")
    })
    shadow(implementation("club.minnced:discord-webhooks:0.8.4") {
        exclude group: "org.slf4j"
    })

    compileOnly("com.github.Streamline-Essentials:StreamlineMessaging:master-SNAPSHOT")
    compileOnly("com.github.Streamline-Essentials:StreamlineGroups:main-SNAPSHOT")
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

shadowJar {
    manifest {
        attributes 'Plugin-Class': rootProject.properties['pf.class'].toString() + '.' + rootProject.name.toString()
        attributes 'Plugin-Id': rootProject.properties['pf.id'].toString()
        attributes 'Plugin-Version': rootProject.version.toString()
        attributes 'Plugin-Requires': ( rootProject.properties['pf.requires'].toString() == 'none' ? '' : rootProject.properties['pf.requires'].toString() )
        attributes 'Plugin-Dependencies': ( rootProject.properties['pf.dependencies'].toString() == 'none' ? '' : rootProject.ext.deps )
        attributes 'Plugin-Description': rootProject.properties['pf.description'].toString()
        attributes 'Plugin-Provider': rootProject.properties['pf.provider'].toString()
        attributes 'Plugin-License': rootProject.properties['pf.license'].toString()
    }

    setArchiveFileName(archiveBaseName.get() + '-' + archiveVersion.get() + '.' + archiveExtension.get())
}

artifacts {
    archives shadowJar
}

wrapper {
    gradleVersion = '8.6'
    distributionType = Wrapper.DistributionType.BIN
}